// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package dbsqlc

import (
	"context"
)

const acquireLock = `-- name: AcquireLock :exec
SELECT pg_advisory_lock($1::int)
`

func (q *Queries) AcquireLock(ctx context.Context, lockNum int32) error {
	_, err := q.db.Exec(ctx, acquireLock, lockNum)
	return err
}

const doesTableExist = `-- name: DoesTableExist :one
SELECT COALESCE(to_regclass($1), FALSE) = FALSE
`

func (q *Queries) DoesTableExist(ctx context.Context, tableName string) (bool, error) {
	row := q.db.QueryRow(ctx, doesTableExist, tableName)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findAllExistingMigrations = `-- name: FindAllExistingMigrations :many
SELECT id, created_at, updated_at, version, name, namespace FROM migrations ORDER BY version
`

func (q *Queries) FindAllExistingMigrations(ctx context.Context) ([]Migration, error) {
	rows, err := q.db.Query(ctx, findAllExistingMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Migration
	for rows.Next() {
		var i Migration
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Version,
			&i.Name,
			&i.Namespace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const releaseLock = `-- name: ReleaseLock :exec
SELECT pg_advisory_unlock($1::int)
`

func (q *Queries) ReleaseLock(ctx context.Context, lockNum int32) error {
	_, err := q.db.Exec(ctx, releaseLock, lockNum)
	return err
}
